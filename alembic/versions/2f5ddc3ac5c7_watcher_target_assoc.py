"""watcher target assoc

Revision ID: 2f5ddc3ac5c7
Revises: 16c8ba3993f5
Create Date: 2017-06-15 11:01:37.290446

"""
from alembic import op
from alembic import context
import sqlalchemy as sa

from sqlalchemy import event, UniqueConstraint
from sqlalchemy import Column, DateTime, String, Integer, ForeignKey, func, BLOB, Text, BigInteger, SmallInteger
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session as BaseSession, relationship
from sqlalchemy.dialects.mysql import INTEGER
import logging

# revision identifiers, used by Alembic.
revision = '2f5ddc3ac5c7'
down_revision = '16c8ba3993f5'
branch_labels = None
depends_on = None


Base = declarative_base()
logger = logging.getLogger(__name__)


class DbUser(Base):
    """
    Users - Laravel maintained table!
    Only columns needed for migration
    """
    __tablename__ = 'users'
    id = Column(INTEGER(10, unsigned=True), primary_key=True)


class DbWatchAssoc(Base):
    """
    User -> Watch target association.
    Only columns needed for migration (all in this case - new table), copied from dbutil.py
    """
    __tablename__ = 'user_watch_target'
    __table_args__ = (UniqueConstraint('user_id', 'watch_id', name='_user_watcher_uniqe'),)
    id = Column(BigInteger, primary_key=True)

    user_id = Column(ForeignKey('users.id'), nullable=False, index=True)
    watch_id = Column(ForeignKey('watch_target.id'), nullable=False, index=True)

    created_at = Column(DateTime, default=None)
    updated_at = Column(DateTime, default=func.now())
    deleted_at = Column(DateTime, default=None, nullable=True)

    scan_periodicity = Column(BigInteger, nullable=True)
    scan_type = Column(Integer, nullable=True)


class DbWatchTarget(Base):
    """
    Watching target - scan server host. Only columns needed for migration
    """
    __tablename__ = 'watch_target'
    id = Column(BigInteger, primary_key=True)
    user_id = Column(BigInteger, nullable=True)
    scan_periodicity = Column(BigInteger, nullable=True)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now())


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_watch_target',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', INTEGER(10, unsigned=True), nullable=False),
    sa.Column('watch_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_watch_target', sa.DateTime(), nullable=True),
    sa.Column('scan_periodicity', sa.BigInteger(), nullable=True),
    sa.Column('scan_type', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['watch_id'], ['watch_target.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'watch_id', name='_user_watcher_uniqe')
    )
    op.create_index(op.f('ix_user_watch_target_user_id'), 'user_watch_target', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_watch_target_watch_id'), 'user_watch_target', ['watch_id'], unique=False)
    # ### end Alembic commands ###

    # Data migration - online mode only
    if context.is_offline_mode():
        logger.warning('Data migration skipped in the offline mode')
        return

    bind = op.get_bind()
    sess = BaseSession(bind=bind)
    it = sess.query(DbWatchTarget).yield_per(1000)
    for rec in it:
        if rec.user_id is None:
            continue

        assoc = DbWatchAssoc()
        assoc.scan_type = 1
        assoc.created_at = rec.created_at
        assoc.updated_at = rec.updated_at
        assoc.scan_periodicity = rec.scan_periodicity
        assoc.user_id = rec.user_id
        assoc.watch_id = rec.id
        sess.add(assoc)
    sess.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_watch_target_watch_id'), table_name='user_watch_target')
    op.drop_index(op.f('ix_user_watch_target_user_id'), table_name='user_watch_target')
    op.drop_table('user_watch_target')
    # ### end Alembic commands ###
